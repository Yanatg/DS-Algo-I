#include <iostream>
#include <algorithm>
#include <list>


using namespace std;

list<int> adj[1000];
int color[1000];
int pre[1000];
int post[1000];
bool visited[1000];
int dfs_clock = 0;

void dfs(int s, int c)
{
    visited[s] = true;
    color[s] = c;
    pre[s] = dfs_clock;
    dfs_clock++;
    for (int i : adj[s])
    {
        if (!visited[i])
        {
            dfs(i, 1-c);
        } else if (color[i] == color[s])
        {
            cout << "false" << endl;
            exit(0);
        }
    }
    post[s] = dfs_clock;
    dfs_clock++;
}

// return true if there is a valid two-coloring, and fill the "color" array
// return false if not
bool two_color(int n)
{
  for (int i = 0; i < n; i++) {
    visited[i] = false;
    color[i] = -1;
  }
  dfs(0, 0);
  for (int i = 0; i < n; i++) {
      if (!visited[i]) {
          dfs(i, 0);
      }
  }
  return true;
}


int main()
{
  int n, m;
  cin >> n;
  cin >> m;
  for (int i = 0; i < m; i++)
  {
    int a, b;
    cin >> a;
    cin >> b;
    adj[a].push_back(b);
    adj[b].push_back(a);
  }
  if (two_color(n))
  {
    cout << "true" << endl;
    for (int i = 0; i < n; i++)
    {
      cout << color[i] << endl;
    }
  }
  else
  {
    cout << "false" << endl;
  }
  return 0;
}
